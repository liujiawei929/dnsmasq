#!/bin/sh /etc/rc.common
# OpenWrt Init Script for Site Filter
# 站点过滤器初始化脚本

START=50
STOP=50

USE_PROCD=1
PROG=/usr/sbin/site_filter
CONFIGFILE=/etc/site_filter.conf
PIDFILE=/var/run/site_filter.pid

validate_config() {
    [ ! -f "$CONFIGFILE" ] && {
        echo "Configuration file not found: $CONFIGFILE"
        return 1
    }
    return 0
}

start_service() {
    validate_config || return 1
    
    echo "Starting Site Filter..."
    
    procd_open_instance
    procd_set_param command $PROG -c $CONFIGFILE
    procd_set_param file $CONFIGFILE
    procd_set_param pidfile $PIDFILE
    procd_set_param respawn ${respawn_threshold:-3600} ${respawn_timeout:-5} ${respawn_retry:-5}
    procd_set_param limits nofile="65536 65536"
    procd_set_param user root
    procd_set_param stdout 1
    procd_set_param stderr 1
    procd_close_instance
    
    echo "Site Filter started"
}

stop_service() {
    echo "Stopping Site Filter..."
    
    # 发送TERM信号给进程
    if [ -f "$PIDFILE" ]; then
        PID=$(cat "$PIDFILE")
        [ -n "$PID" ] && kill -TERM "$PID" 2>/dev/null
        
        # 等待进程结束
        local timeout=10
        while [ $timeout -gt 0 ] && kill -0 "$PID" 2>/dev/null; do
            sleep 1
            timeout=$((timeout - 1))
        done
        
        # 如果仍在运行，强制杀死
        if kill -0 "$PID" 2>/dev/null; then
            echo "Force killing Site Filter..."
            kill -KILL "$PID" 2>/dev/null
        fi
        
        rm -f "$PIDFILE"
    fi
    
    echo "Site Filter stopped"
}

reload_service() {
    echo "Reloading Site Filter configuration..."
    
    if [ -f "$PIDFILE" ]; then
        PID=$(cat "$PIDFILE")
        [ -n "$PID" ] && kill -HUP "$PID" 2>/dev/null
        echo "Site Filter configuration reloaded"
    else
        echo "Site Filter is not running"
        return 1
    fi
}

service_triggers() {
    procd_add_reload_trigger "site_filter"
    procd_add_validation validate_section_site_filter
}

validate_section_site_filter() {
    uci_validate_section site_filter site_filter "${1}" \
        'enabled:bool:1' \
        'dns_port:port:53' \
        'block_ip:ip4addr:0.0.0.0' \
        'log_level:integer:6' \
        'config_file:string:/etc/site_filter.conf'
}

status() {
    if [ -f "$PIDFILE" ]; then
        PID=$(cat "$PIDFILE")
        if kill -0 "$PID" 2>/dev/null; then
            echo "Site Filter is running (PID: $PID)"
            return 0
        else
            echo "Site Filter is not running (stale PID file)"
            return 1
        fi
    else
        echo "Site Filter is not running"
        return 1
    fi
}

# UCI配置支持
boot() {
    # 在系统启动时加载UCI配置
    load_uci_config
    start
}

load_uci_config() {
    # 从UCI配置生成站点过滤器配置文件
    local enabled dns_port block_ip log_level
    
    config_load site_filter
    config_get enabled general enabled 1
    config_get dns_port general dns_port 53
    config_get block_ip general block_ip "0.0.0.0"
    config_get log_level general log_level 6
    
    [ "$enabled" = "0" ] && return 1
    
    # 生成配置文件
    cat > "$CONFIGFILE" << EOF
# Generated by OpenWrt UCI configuration
dns_port=$dns_port
block_ip=$block_ip
log_level=$log_level

EOF
    
    # 添加规则
    config_foreach append_rule rule
    
    return 0
}

append_rule() {
    local domain action redirect_ip
    
    config_get domain "$1" domain
    config_get action "$1" action
    config_get redirect_ip "$1" redirect_ip
    
    [ -z "$domain" ] || [ -z "$action" ] && return
    
    if [ "$action" = "redirect" ] && [ -n "$redirect_ip" ]; then
        echo "$domain $action $redirect_ip" >> "$CONFIGFILE"
    else
        echo "$domain $action" >> "$CONFIGFILE"
    fi
}

# 扩展命令支持
EXTRA_COMMANDS="status reload rules stats"
EXTRA_HELP="	status	Check if service is running
	reload	Reload configuration
	rules	Show current filtering rules
	stats	Show filtering statistics"

rules() {
    echo "Current filtering rules:"
    if [ -f "$CONFIGFILE" ]; then
        grep -v "^#" "$CONFIGFILE" | grep -v "^$" | while read line; do
            echo "  $line"
        done
    else
        echo "  No configuration file found"
    fi
}

stats() {
    echo "Site Filter Statistics:"
    echo "  Configuration file: $CONFIGFILE"
    echo "  PID file: $PIDFILE"
    
    if [ -f "$PIDFILE" ]; then
        PID=$(cat "$PIDFILE")
        echo "  Process ID: $PID"
        
        # 显示内存使用情况
        if [ -f "/proc/$PID/status" ]; then
            MEM=$(grep "VmRSS" "/proc/$PID/status" | awk '{print $2 " " $3}')
            echo "  Memory usage: $MEM"
        fi
        
        # 显示启动时间
        if [ -f "/proc/$PID/stat" ]; then
            STARTTIME=$(awk '{print $22}' "/proc/$PID/stat")
            echo "  Start time: $STARTTIME"
        fi
    else
        echo "  Status: Not running"
    fi
    
    # 显示日志文件大小
    LOGFILE="/var/log/site_filter.log"
    if [ -f "$LOGFILE" ]; then
        LOGSIZE=$(wc -c < "$LOGFILE")
        echo "  Log file size: $LOGSIZE bytes"
        echo "  Recent log entries:"
        tail -5 "$LOGFILE" | sed 's/^/    /'
    fi
}